image: alpine:latest

variables:
  # KUBE_INGRESS_BASE_DOMAIN is the application deployment domain and should be set as a variable at the group or project level.
  KUBE_INGRESS_BASE_DOMAIN: nonprod.tower.cdrentertainment.com
  HELM_SCALE_EXTRA_ARGS: --set postgresql.enabled="false"

  # from gitlab project ci variables - normally env specific
  K8S_SECRET_RUMBLE_COMPONENT: "$RUMBLE_COMPONENT"
  K8S_SECRET_RUMBLE_DEPLOYMENT: "$RUMBLE_DEPLOYMENT"
  K8S_SECRET_MONGODB_URI: "$MONGODB_URI"
  
  # Common Platform CI variables - contains information for several environments,
  # parsed by PlatformEnvironment.
  K8S_SECRET_PLATFORM_COMMON: "$PLATFORM_COMMON"
  
  # Overrides for Platform Common CI
  # These variables are not inherently necessary for your project to run successfully in environments.  A value from these will always come from PLATFORM_COMMON.
  # However, you may want to override them.  Listing them here in the yml removes one step from the maintenance if you need to.
  # In gitlab's CI settings, add a value with any of these keys to override the inherited variables from the PLATFORM_COMMON group var.
  K8S_SECRET_CONFIG_SERVICE_URL: "$CONFIG_SERVICE_URL"
  K8S_SECRET_GAME_GUKEY: "$GAME_GUKEY"
  K8S_SECRET_GRAPHITE: "$GRAPHITE"
  K8S_SECRET_LOGGLY_URL: "$LOGGLY_URL" # override this if you need to change the tag manually for your service, e.g. receipt-service-v2 when the component name is just receipt-service
  K8S_SECRET_RUMBLE_KEY: "$RUMBLE_KEY"
  K8S_SECRET_RUMBLE_TOKEN_VALIDATION: "$RUMBLE_TOKEN_VALIDATION"
  K8S_SECRET_SLACK_ENDPOINT_POST_MESSAGE: "$SLACK_ENDPOINT_POST_MESSAGE"
  K8S_SECRET_SLACK_ENDPOINT_UPLOAD: "$SLACK_ENDPOINT_UPLOAD"
  K8S_SECRET_SLACK_ENDPOINT_USER_LIST: "$SLACK_ENDPOINT_USER_LIST"
  K8S_SECRET_SLACK_LOG_BOT_TOKEN: "$SLACK_LOG_BOT_TOKEN"
  K8S_SECRET_SLACK_LOG_CHANNEL: "$SLACK_LOG_CHANNEL"
  K8S_SECRET_SWARM_MODE: "$SWARM_MODE"
  K8S_SECRET_VERBOSE_LOGGING: "$VERBOSE_LOGGING"
  
  DOCKER_DRIVER: overlay2

  ROLLOUT_RESOURCE_TYPE: deployment
  DEPLOY_TYPE: "kubernetes"

  DOCKER_TLS_CERTDIR: ""  # https://gitlab.com/gitlab-org/gitlab-runner/issues/4501

stages:
  - app_build
  - build
  - scan
  - deploy  # dummy stage to follow the template guidelines
  - dev
  - staging
  - production
  - performance
  - cleanup

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always

build_app:
  stage: app_build
  image: mcr.microsoft.com/dotnet/sdk:6.0
  allow_failure: false
  script:
    - dotnet nuget add source --username $BOT_USER --password $BOT_PAT --store-password-in-clear-text --name gitlab "https://gitlab.cdrentertainment.com/api/v4/projects/14/packages/nuget/index.json"
    - dotnet restore
    - dotnet build --no-restore --configuration Release
    - CURRENTVERSION="$(dotnet ./bin/Release/net5.0/leaderboard-service.dll -version | cut -d':' -f2)"
    - git tag $CURRENTVERSION; git push https://$BOT_USER:${BOT_PAT}@gitlab.cdrentertainment.com/platform-services/$CI_PROJECT_NAME.git --tags
    - echo "$CURRENTVERSION"
  artifacts:
    paths:
      - bin/Release/net6.0/*
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

build_image:
  stage: build
  allow_failure: false
  cache:
    key: $CI_PROJECT_NAME-scan2
    paths:
      - ./.trivycache
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - mkdir -p $CI_PROJECT_DIR/trivy
    - mkdir -p $CI_PROJECT_DIR/.trivycache
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
    - cd $CI_PROJECT_DIR/trivy
    - wget https://github.com/aquasecurity/trivy/releases/download/v0.20.1/trivy_0.20.1_Linux-64bit.tar.gz
    - tar -zxvf trivy*
    - chmod +x $CI_PROJECT_DIR/trivy
    - wget https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl
    - ./trivy --cache-dir $CI_PROJECT_DIR/.trivycache image --severity HIGH,CRITICAL $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
  rules:
    - if: '$BUILD_DISABLED'
      when: never
    - if: $DEPLOY_TYPE == "beanstalk"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $DEPLOY_TYPE == "kubernetes" || $DEPLOY_TYPE == "both"
      when: on_success
  needs:
    - job: build_app
      artifacts: true
  artifacts:
    paths:
      - $CI_PROJECT_DIR/trivy/$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA.html
    expire_in: 1 week

# commit_scan_results:
#   stage: scan
#   allow_failure: false
#   image:
#     name: ubuntu
#   script:
#     - apt update
#     - apt install -y git
#     - git clone https://$BOT_USER:${BOT_PAT}@gitlab.cdrentertainment.com/platform-services/$CI_PROJECT_NAME.wiki.git
#     - mkdir -p $CI_PROJECT_DIR/$CI_PROJECT_NAME.wiki/securityscans/
#     - cp $CI_PROJECT_DIR/trivy/$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA.html $CI_PROJECT_NAME.wiki/securityscans/$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA.md
#     - cd $CI_PROJECT_NAME.wiki
#     - export TZ=":America/Los_Angeles"
#     - export OUTPUT="[`date +\"%m-%d-%y %r\"`]\(securityscans/$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA\)\n\n"
#     - echo "$(echo -e $OUTPUT; cat securityscans/SecurityScans.md)" > securityscans/SecurityScans.md
#     - git config --global user.email "platform-ops@rumbleentertainment.com"
#     - git config --global user.name "Gitlab"
#     - git add .; git commit -m "securityscan for image $CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA"; git push
#   needs:
#     - job: build_image
#       artifacts: true
#   rules:
#     - if: $CI_COMMIT_TAG
#       when: never
#     - when: on_success


include:
  - '/.gitlab/deploy-k8s.yaml'
